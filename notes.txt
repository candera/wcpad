TODO: 
* Fix orientation problem via custom transform hack

* Get memory usage under control

* Add real support for map orientation detection

* Detect existing file at open/new/close and prompt for save

* Move all property setters to styles. 
  * Can data-bound properties live in styles? 

* Start with blank map: make user select printer and orientation to
  create new one

* Loading of custom image

* Printing of border with custom image and barcode

* Fix problem where mouse up outside of borders does not register with viewmodel

* Add unit tests

* Add support for multiple maps

  * Pad barcode

  * Calculation of fingertip location per-map

* Performance measurement

* Figure out why, after printing, the map jumps to the left. 

* Maybe switch the driver app to WPF? This might be helpful: 

  * http://www.hardcodet.net/projects/wpf-notifyicon
  
DEFER:
* Fix x64 build. Probably need to get an x64 build of openCV

DONE:
* Display location of fingertip on a custom map

* Set up wcpadd to read file and use to draw onscreen tracking 

* Move code for loading file to common DLL. 

* Be able to load an existing file. 

* Be able to save regions to a file. 

* Closing and creating a new map preserves the regions from the old
  one. That ain't right. 

* Figure out how to get mouse events routed to the controller. They're
  currently only being sent when the mouse is in the border. Can I
  bind the Canvas to the collection instead of the Border? Seems like
  I ought to be able to. 

* Give the Canvas in the ItemsControl a background so it will receive
  mouse events. Transparent is fine. 

* Figure out how to make the canvas grey and noninteractive until a
  new document has been created. 
* Get rudimentary on-screen position stuff working
* Fix problem with spaces in path in copy-dependencies.cmd
* Add drawing of regions: a mouse moving while down adds a region until mouse up
* Build to x86 and x64 directories - look at what VS does


Conversation with Ian: 

* The approach that ScottHanselman is taking is the wrong one. 
* The View should just be a projection of whatever your model. 
* Might make sense to have a ViewModel (aka Presenter). 
* Observable collection with one object per rectangle
  * ItemsControl
  * ItemsPanelTemplate (ItemsPanel) with a Canvas
  * That'll let me position the things in there based on the data
  * Slightly complicated because there are extra stuff in the visual tree
  * ItemsControl.ItemContainerStyle lets me define a style that lets me define
    binding properties on the item itself
  * DataBinding lab has an example
  * Define methods for mouse down and up on ViewModel/Presenter, which will
    then add new rectangles. 
  * For tracking active rectangles, use the same approach: have the ViewModel 
    deal with the mouse up/down
